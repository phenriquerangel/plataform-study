{
  "version": 4,
  "terraform_version": "1.11.4",
  "serial": 245,
  "lineage": "2c1e342a-2df7-e5d9-ccc0-e8e023ca4647",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "cert_manager",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "cert-manager",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "cert-manager",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v1.14.2",
                "chart": "cert-manager",
                "first_deployed": 1747675485,
                "last_deployed": 1747675485,
                "name": "cert-manager",
                "namespace": "cert-manager",
                "notes": "cert-manager v1.14.2 has been deployed successfully!\n\nIn order to begin issuing certificates, you will need to set up a ClusterIssuer\nor Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).\n\nMore information on the different types of issuers and how to configure them\ncan be found in our documentation:\n\nhttps://cert-manager.io/docs/configuration/\n\nFor information on how to configure cert-manager to automatically provision\nCertificates for Ingress resources, take a look at the `ingress-shim`\ndocumentation:\n\nhttps://cert-manager.io/docs/usage/ingress/\n",
                "revision": 1,
                "values": "{\"installCRDs\":true,\"prometheus\":{\"enabled\":false}}",
                "version": "v1.14.2"
              }
            ],
            "name": "cert-manager",
            "namespace": "cert-manager",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.jetstack.io",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "installCRDs",
                "type": "",
                "value": "true"
              },
              {
                "name": "prometheus.enabled",
                "type": "",
                "value": "false"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "v1.14.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.cert_manager"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "elasticsearch",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "elasticsearch",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "elasticsearch",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "7.17.3",
                "chart": "elasticsearch",
                "first_deployed": 1747675487,
                "last_deployed": 1747675487,
                "name": "elasticsearch",
                "namespace": "logging",
                "notes": "1. Watch all cluster members come up.\n  $ kubectl get pods --namespace=logging -l app=elasticsearch-master -w2. Test cluster health using Helm test.\n  $ helm --namespace=logging test elasticsearch",
                "revision": 1,
                "values": "{\"minimumMasterNodes\":1,\"replicas\":1}",
                "version": "7.17.3"
              }
            ],
            "name": "elasticsearch",
            "namespace": "logging",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://helm.elastic.co",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "minimumMasterNodes",
                "type": "",
                "value": "1"
              },
              {
                "name": "replicas",
                "type": "",
                "value": "1"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "7.17.3",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.logging"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "fluentbit",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "fluent-bit",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "fluent-bit",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "4.0.1",
                "chart": "fluent-bit",
                "first_deployed": 1747675496,
                "last_deployed": 1747675496,
                "name": "fluent-bit",
                "namespace": "logging",
                "notes": "Get Fluent Bit build information by running these commands:\n\nexport POD_NAME=$(kubectl get pods --namespace logging -l \"app.kubernetes.io/name=fluent-bit,app.kubernetes.io/instance=fluent-bit\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl --namespace logging port-forward $POD_NAME 2020:2020\ncurl http://127.0.0.1:2020 \n\n",
                "revision": 1,
                "values": "{\"backend\":{\"es\":{\"host\":\"elasticsearch.logging.svc.cluster.local\",\"logstash_prefix\":\"k8s\",\"port\":9200},\"type\":\"es\"}}",
                "version": "0.49.0"
              }
            ],
            "name": "fluent-bit",
            "namespace": "logging",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://fluent.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "backend.es.host",
                "type": "",
                "value": "elasticsearch.logging.svc.cluster.local"
              },
              {
                "name": "backend.es.logstash_prefix",
                "type": "",
                "value": "k8s"
              },
              {
                "name": "backend.es.port",
                "type": "",
                "value": "9200"
              },
              {
                "name": "backend.type",
                "type": "",
                "value": "es"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "0.49.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.logging"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "kibana",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "kibana",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "kibana",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "8.4.1",
                "chart": "kibana",
                "first_deployed": 1747675493,
                "last_deployed": 1747675493,
                "name": "kibana",
                "namespace": "logging",
                "notes": "CHART NAME: kibana\nCHART VERSION: 10.2.4\nAPP VERSION: 8.4.1\n\n** Please be patient while the chart is being deployed **######################################################################################################\n### ERROR: You did not provide the Elasticsearch external host or port in your 'helm install' call ###\n######################################################################################################\n\nComplete your Kibana deployment by running:\n\n  helm upgrade --namespace logging kibana bitnami/kibana \\\n    --set elasticsearch.hosts[0]=YOUR_ES_HOST,elasticsearch.port=YOUR_ES_PORT\n\nReplacing \"YOUR_ES_HOST\" and \"YOUR_ES_PORT\" placeholders by the proper values of your Elasticsearch deployment.\n",
                "revision": 1,
                "values": "{\"elasticsearch\":{\"hosts\":[\"elasticsearch.logging.svc.cluster.local\"]}}",
                "version": "10.2.4"
              }
            ],
            "name": "kibana",
            "namespace": "logging",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.bitnami.com/bitnami",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "elasticsearch.hosts[0]",
                "type": "",
                "value": "elasticsearch.logging.svc.cluster.local"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "10.2.4",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.logging"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "kube_prometheus",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "kube-prometheus-stack",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "kube-prometheus",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v0.73.2",
                "chart": "kube-prometheus-stack",
                "first_deployed": 1747675498,
                "last_deployed": 1747675498,
                "name": "kube-prometheus",
                "namespace": "monitoring",
                "notes": "kube-prometheus-stack has been installed. Check its status by running:\n  kubectl --namespace monitoring get pods -l \"release=kube-prometheus\"\n\nVisit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026 configure Alertmanager and Prometheus instances using the Operator.\n\nkube-state-metrics is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects.\nThe exposed metrics can be found here:\nhttps://github.com/kubernetes/kube-state-metrics/blob/master/docs/README.md#exposed-metrics\n\nThe metrics are exported on the HTTP endpoint /metrics on the listening port.\nIn your case, kube-prometheus-kube-state-metrics.monitoring.svc.cluster.local:8080/metrics\n\nThey are served either as plaintext or protobuf depending on the Accept header.\nThey are designed to be consumed either by Prometheus itself or by a scraper that is compatible with scraping a Prometheus client endpoint.\n\n1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app.kubernetes.io/name=prometheus-node-exporter,app.kubernetes.io/instance=kube-prometheus\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:9100 to use your application\"\n  kubectl port-forward --namespace monitoring $POD_NAME 9100\n1. Get your 'admin' user password by running:\n\n   kubectl get secret --namespace monitoring kube-prometheus-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n\n\n2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:\n\n   kube-prometheus-grafana.monitoring.svc.cluster.local\n\n   Get the Grafana URL to visit by running these commands in the same shell:\n     export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=kube-prometheus\" -o jsonpath=\"{.items[0].metadata.name}\")\n     kubectl --namespace monitoring port-forward $POD_NAME 3000\n\n3. Login with the password from step 1 and the username: admin\n#################################################################################\n######   WARNING: Persistence is disabled!!! You will lose your data when   #####\n######            the Grafana pod is terminated.                            #####\n#################################################################################\n",
                "revision": 1,
                "values": "{\"grafana\":{\"adminPassword\":\"admin\",\"service\":{\"type\":\"ClusterIP\"}},\"prometheus\":{\"prometheusSpec\":{\"scrapeInterval\":\"15s\"},\"service\":{\"type\":\"ClusterIP\"}}}",
                "version": "58.5.0"
              }
            ],
            "name": "kube-prometheus",
            "namespace": "monitoring",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://prometheus-community.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "grafana.adminPassword",
                "type": "",
                "value": "admin"
              },
              {
                "name": "grafana.service.type",
                "type": "",
                "value": "ClusterIP"
              },
              {
                "name": "prometheus.prometheusSpec.scrapeInterval",
                "type": "",
                "value": "15s"
              },
              {
                "name": "prometheus.service.type",
                "type": "",
                "value": "ClusterIP"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "58.5.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.monitoring"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "minio",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "minio",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "minio",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "2023.11.6",
                "chart": "minio",
                "first_deployed": 1747675503,
                "last_deployed": 1747675503,
                "name": "minio",
                "namespace": "minio",
                "notes": "CHART NAME: minio\nCHART VERSION: 12.9.3\nAPP VERSION: 2023.11.6\n\n** Please be patient while the chart is being deployed **\n\nMinIO\u0026reg; can be accessed via port  on the following DNS name from within your cluster:\n\n   minio.minio.svc.cluster.local\n\nTo get your credentials run:\n\n   export ROOT_USER=$(kubectl get secret --namespace minio minio -o jsonpath=\"{.data.root-user}\" | base64 -d)\n   export ROOT_PASSWORD=$(kubectl get secret --namespace minio minio -o jsonpath=\"{.data.root-password}\" | base64 -d)\n\nTo connect to your MinIO\u0026reg; server using a client:\n\n- Run a MinIO\u0026reg; Client pod and append the desired command (e.g. 'admin info'):\n\n   kubectl run --namespace minio minio-client \\\n     --rm --tty -i --restart='Never' \\\n     --env MINIO_SERVER_ROOT_USER=$ROOT_USER \\\n     --env MINIO_SERVER_ROOT_PASSWORD=$ROOT_PASSWORD \\\n     --env MINIO_SERVER_HOST=minio \\\n     --image docker.io/bitnami/minio-client:2023.11.6-debian-11-r1 -- admin info minio\n\nTo access the MinIO\u0026reg; web UI:\n\n- Get the MinIO\u0026reg; URL:\n\n   echo \"MinIO\u0026reg; web URL: http://127.0.0.1:9001/minio\"\n   kubectl port-forward --namespace minio svc/minio 9001:9001\n",
                "revision": 1,
                "values": "{\"auth\":{\"rootPassword\":\"minioadmin\",\"rootUser\":\"minioadmin\"},\"mode\":\"standalone\",\"persistence\":{\"enabled\":true,\"size\":\"10Gi\",\"storageClass\":\"hostpath\"},\"service\":{\"type\":\"ClusterIP\"}}",
                "version": "12.9.3"
              }
            ],
            "name": "minio",
            "namespace": "minio",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.bitnami.com/bitnami",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "auth.rootPassword",
                "type": "",
                "value": "minioadmin"
              },
              {
                "name": "auth.rootUser",
                "type": "",
                "value": "minioadmin"
              },
              {
                "name": "mode",
                "type": "",
                "value": "standalone"
              },
              {
                "name": "persistence.enabled",
                "type": "",
                "value": "true"
              },
              {
                "name": "persistence.size",
                "type": "",
                "value": "10Gi"
              },
              {
                "name": "persistence.storageClass",
                "type": "",
                "value": "hostpath"
              },
              {
                "name": "service.type",
                "type": "",
                "value": "ClusterIP"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "12.9.3",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "backend",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "backend",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "backend",
                "resource_version": "28065",
                "uid": "fdb0fbac-d7b5-4399-8d4c-6fbf5de6381a"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "cert_manager",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "cert-manager",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "cert-manager",
                "resource_version": "28064",
                "uid": "98acf54c-72d3-4ecc-8ecd-88fdac9d0b6d"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "logging",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "logging",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "logging",
                "resource_version": "28066",
                "uid": "120f8e87-bbc7-4bd4-965a-004023a37d05"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "minio",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "minio",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "minio",
                "resource_version": "28067",
                "uid": "7ef538dd-d46e-47b9-8c34-a4f90b03336a"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "monitoring",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "monitoring",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "monitoring",
                "resource_version": "28068",
                "uid": "9a8a098a-0700-4530-86d0-4d923b7d26b8"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_persistent_volume_claim",
      "name": "postgres_pvc",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "backend/postgres-pvc",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "postgres-pvc",
                "namespace": "backend",
                "resource_version": "28087",
                "uid": "171348cc-8f91-4496-9732-453ed56a9b38"
              }
            ],
            "spec": [
              {
                "access_modes": [
                  "ReadWriteOnce"
                ],
                "resources": [
                  {
                    "limits": null,
                    "requests": {
                      "storage": "20Gi"
                    }
                  }
                ],
                "selector": [],
                "storage_class_name": "hostpath",
                "volume_mode": "Filesystem",
                "volume_name": "pvc-171348cc-8f91-4496-9732-453ed56a9b38"
              }
            ],
            "timeouts": null,
            "wait_until_bound": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "kubernetes_namespace.backend"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
