apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-questions
  labels:
    app: api-questions
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
spec:
  replicas: {{ .Values.api.replicaCount }}
  selector:
    matchLabels:
      app: api-questions
      release: "{{ .Release.Name }}"
  template:
    metadata:
      labels:
        app: api-questions
        release: "{{ .Release.Name }}"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
      containers:
        - name: api-questions
          image: {{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          # Adicionar probes para health check
          livenessProbe:
            {{- toYaml .Values.api.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.api.readinessProbe | nindent 12 }}
          # Adicionar recursos
          resources:
            {{- toYaml .Values.api.resources | nindent 12 }}
          env:
            - name: DB_HOST
              value: {{ if .Values.postgresql.enabled }}{{ .Release.Name }}-postgresql{{ else }}{{ .Values.externalDatabase.host }}{{ end }}
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: api-config
                  key: db_name
            # Usar secrets para credenciais em vez de valores diretos
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.enabled }}{{ .Values.postgresql.auth.existingSecret }}{{ else }}{{ .Values.externalDatabase.existingSecret }}{{ end }}
                  key: {{ if .Values.postgresql.enabled }}username{{ else }}username{{ end }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.postgresql.enabled }}{{ .Values.postgresql.auth.existingSecret }}{{ else }}{{ .Values.externalDatabase.existingSecret }}{{ end }}
                  key: {{ if .Values.postgresql.enabled }}{{ .Values.postgresql.auth.secretKeys.userPasswordKey }}{{ else }}password{{ end }}
